"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[1148],{8503:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>p,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(4848),t=n(8453);const a={sidebar_position:1,displayed_sidebar:"docs"},r="CheckboxResponse",i={id:"typedoc/interfaces/CheckboxResponse",title:"CheckboxResponse",description:"The CheckboxResponse interface is used to define the properties of a checkbox response.",source:"@site/docs/typedoc/interfaces/CheckboxResponse.md",sourceDirName:"typedoc/interfaces",slug:"/typedoc/interfaces/CheckboxResponse",permalink:"/docs/typedoc/interfaces/CheckboxResponse",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"BaseResponse",permalink:"/docs/typedoc/interfaces/BaseResponse"},next:{title:"ComponentBlock",permalink:"/docs/typedoc/interfaces/ComponentBlock"}},p={},c=[];function d(e){const s={code:"code",h1:"h1",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h1,{id:"checkboxresponse",children:"CheckboxResponse"}),"\n",(0,o.jsx)(s.p,{children:"The CheckboxResponse interface is used to define the properties of a checkbox response.\nCheckboxResponses render as a checkbox input with user specified options."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-js",children:'{\n   "id": "q7",\n   "prompt": "Checkbox example (not required)",\n   "required": false,\n   "location": "aboveStimulus",\n   "type": "checkbox",\n   "options": [\n       {\n           "label": "Option 1",\n           "value": "opt-1"\n       },\n       {\n           "label": "Option 2",\n           "value": "opt-2"\n       },\n       {\n           "label": "Option 3",\n           "value": "opt-3"\n       }\n   ]\n}\n\n## Extends\n\n- [`BaseResponse`](BaseResponse.md)\n\n## Properties\n\n| Property | Type | Description | Inherited from |\n| :------ | :------ | :------ | :------ |\n| `hidden?` | `boolean` | Controls whether the response is hidden. | [`BaseResponse`](BaseResponse.md).`hidden` |\n| `id` | `string` | The id of the response. This is used to identify the response in the data file. | [`BaseResponse`](BaseResponse.md).`id` |\n| `location?` | `"sidebar"` \\| `"aboveStimulus"` \\| `"belowStimulus"` | Controls the response location. These might be the same for all responses, or differ across responses. Defaults to `belowStimulus` | [`BaseResponse`](BaseResponse.md).`location` |\n| `options` | [`StringOption`](StringOption.md)[] | The options that are displayed as checkboxes, provided as an array of objects, with label and value fields. | - |\n| `paramCapture?` | `string` | Use to capture querystring parameters in answers such as participant_name. See the examples for how this is used, but prefer uiConfig.urlParticipantIdParam if you are capturing a participant ID. | [`BaseResponse`](BaseResponse.md).`paramCapture` |\n| `prompt` | `string` | The prompt that is displayed to the participant. You can use markdown here to render images, links, etc. | [`BaseResponse`](BaseResponse.md).`prompt` |\n| `required` | `boolean` | Controls whether the response is required to be answered. | [`BaseResponse`](BaseResponse.md).`required` |\n| `requiredLabel?` | `string` | You can provide a required label, which makes it so a participant has to answer with a response that matches label. | [`BaseResponse`](BaseResponse.md).`requiredLabel` |\n| `requiredValue?` | `unknown` | You can provide a required value, which makes it so a participant has to answer with that value. | [`BaseResponse`](BaseResponse.md).`requiredValue` |\n| `secondaryText?` | `string` | The secondary text that is displayed to the participant under the prompt. This does not accept markdown. | [`BaseResponse`](BaseResponse.md).`secondaryText` |\n| `type` | `"checkbox"` | - | - |\n'})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>i});var o=n(6540);const t={},a=o.createContext(t);function r(e){const s=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(a.Provider,{value:s},e.children)}}}]);