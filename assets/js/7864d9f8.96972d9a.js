"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6491],{50413:(e,n,t)=>{t.d(n,{A:()=>m});const s={container:"container_xt6w",linkContainer:"linkContainer_RYvw",iconContainer:"iconContainer_M3C8",demosTitle:"demosTitle_CEJp",codesTitle:"codesTitle_Z3_M",referencesTitle:"referencesTitle_uPPp"};var i=t(96540),r=t(40961),a=t(59856),o=t(83914),c=t(37875),l=t(66188),d=t(73906),h=t(74848);function p(e){let{demoLinks:n,codeLinks:t,referenceLinks:d}=e;const[p,m]=(0,i.useState)(null),[u]=(0,i.useState)((()=>document.createElement("div")));return(0,i.useEffect)((()=>{const e=document.querySelector(".theme-doc-toc-desktop");if(e?.parentElement){const n=e.parentElement;n.insertBefore(u,n.firstChild),m(u)}return()=>{u.remove()}}),[u]),(n||t||d)&&p?r.createPortal((0,h.jsx)("div",{className:s.container,children:(0,h.jsx)(a.A,{type:"note",title:"Relevant Links",children:(0,h.jsxs)("div",{className:s.linkContainer,children:[n&&n.length>0?(0,h.jsxs)("div",{className:s.demosContainer,children:[(0,h.jsxs)("div",{className:s.iconContainer,children:[(0,h.jsx)(o.g,{icon:l.CQO}),(0,h.jsx)("div",{className:s.demosTitle,children:"Live Demos"})]}),(0,h.jsx)("div",{style:{marginLeft:"23px"},children:n.map((e=>(0,h.jsx)("a",{target:"_blank",href:e.url,children:e.name})))})]}):null,t&&t.length>0?(0,h.jsxs)("div",{className:s.codesContainer,children:[(0,h.jsxs)("div",{className:s.iconContainer,children:[(0,h.jsx)(o.g,{icon:c.Vz1}),(0,h.jsx)("div",{className:s.codesTitle,children:"Demo Codes"})]}),(0,h.jsx)("div",{style:{marginLeft:"23px"},children:t.map((e=>(0,h.jsx)("a",{target:"_blank",href:e.url,children:e.name})))})]}):null,d&&d.length>0?(0,h.jsxs)("div",{className:s.referencesContainer,children:[(0,h.jsxs)("div",{className:s.iconContainer,children:[(0,h.jsx)(o.g,{icon:l.h8M}),(0,h.jsx)("div",{className:s.referencesTitle,children:"References"})]}),(0,h.jsx)("div",{style:{marginLeft:"23px"},children:d.map((e=>(0,h.jsx)("a",{target:"_blank",href:e.url,children:e.name})))})]}):null]})})}),p):null}const m=function(e){let{demoLinks:n,codeLinks:t,referenceLinks:s}=e;return(0,h.jsx)(d.A,{children:()=>(0,h.jsx)(p,{demoLinks:n,codeLinks:t,referenceLinks:s})})}},426:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"revisitpy/examples/example_expanding_html_study","title":"Enhancing The Simple HTML Study","description":"<StructuredLinks","source":"@site/docs/revisitpy/examples/example_expanding_html_study.md","sourceDirName":"revisitpy/examples","slug":"/revisitpy/examples/example_expanding_html_study","permalink":"/docs/revisitpy/examples/example_expanding_html_study","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Simple HTML Study","permalink":"/docs/revisitpy/examples/example_simple_html"},"next":{"title":"Correlation Visualization JND Example Study","permalink":"/docs/revisitpy/examples/example_jnd_study"}}');var i=t(74848),r=t(28453),a=t(50413);const o={},c="Enhancing The Simple HTML Study",l={},d=[{value:"Using the Data Parser and <code>from_data</code> method",id:"using-the-data-parser-and-from_data-method",level:2},{value:"Transforming The Components",id:"transforming-the-components",level:2},{value:"Creating the Final Sequence",id:"creating-the-final-sequence",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"enhancing-the-simple-html-study",children:"Enhancing The Simple HTML Study"})}),"\n","\n",(0,i.jsx)(a.A,{codeLinks:[{name:"HTML Input Code",url:"https://github.com/revisit-studies/study/blob/main/public/demo-html-input/config.json"}],referenceLinks:[{name:"reVISitPy Classes",url:"https://revisit.dev/docs/revisitpy-reference/classes/"},{name:"reVISitPy Functions",url:"https://revisit.dev/docs/revisitpy-reference/functions/"}]}),"\n",(0,i.jsxs)(n.p,{children:["In the previous example, we went over creating the configuration file shown ",(0,i.jsx)(n.a,{href:"https://github.com/revisit-studies/study/blob/main/public/demo-html-input/config.json",children:"here"}),". While that example is still a valid use case for the ",(0,i.jsx)(n.code,{children:"revisitpy"})," package, this may be a configuration that is simpler to write in standard JSON. In this example, we'll go over a use case which more readily requires the ",(0,i.jsx)(n.code,{children:"revisitpy"})," package."]}),"\n",(0,i.jsx)(n.p,{children:"Instead of defining the data for each bar chart directly in the python notebook, suppose we have a CSV file which contains the data for each bar chart. Depending on your specific needs, you may be generating data in R or some other separate Python environment. In these cases, it is extremely useful to have a seamless way to convert raw data into well-defined reVISit components."}),"\n",(0,i.jsxs)(n.p,{children:["Rather than copy this data over into our jupyter notebook, we will use the built-in ",(0,i.jsx)(n.code,{children:"data"})," function to first import the CSV file and then generate components from the data set using the ",(0,i.jsx)(n.code,{children:"Sequence"})," class's ",(0,i.jsx)(n.code,{children:"from_data"})," method."]}),"\n",(0,i.jsxs)(n.h2,{id:"using-the-data-parser-and-from_data-method",children:["Using the Data Parser and ",(0,i.jsx)(n.code,{children:"from_data"})," method"]}),"\n",(0,i.jsxs)(n.p,{children:["We load in the data using the built-in ",(0,i.jsx)(n.code,{children:"data"})," function. This will generate a list of ",(0,i.jsx)(n.code,{children:"DataRows"})," classes. We can then pass this directly into the ",(0,i.jsx)(n.code,{children:"from_data"})," method of the sequence we create."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import revisitpy as rvt\n\n# Import the data using the build in data parser.\nstudy_data = rvt.data('./assets/data.csv')\n\n# Generate a single component for each element of the dataset.\ndata_sequence = rvt.sequence(order='random').from_data(study_data)\n\nprint('------- Sequence --------')\nprint(data_sequence)\n\nprint('------- Individual Component -------')\nprint(data_sequence.get_components()[0])\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-output",children:'------- Sequence --------\n{\n    "components": [\n        "place-holder-component_id:1_b1:0.32_b2:0.01_b3:1.2_b4:1.3_b5:0.82_b6:0.4_b7:0.3",\n        "place-holder-component_id:2_b1:1.2_b2:1.2_b3:1.2_b4:1.3_b5:0.82_b6:0.4_b7:0.3",\n        "place-holder-component_id:3_b1:0.6_b2:1.1_b3:0.7_b4:0.74_b5:1.3_b6:0.1_b7:0.9",\n        "place-holder-component_id:4_b1:1.3_b2:1.1_b3:1.3_b4:0.64_b5:0.31_b6:0.2_b7:0.8",\n        "place-holder-component_id:5_b1:0.1_b2:0.1_b3:0.3_b4:0.4_b5:0.5_b6:1.1_b7:0.2",\n        "place-holder-component_id:6_b1:0.3_b2:1.1_b3:0.65_b4:0.77_b5:0.4_b6:1.3_b7:1.1"\n    ],\n    "order": "random"\n}\n------- Individual Component -------\n{\n    "meta": {\n        "id": 1,\n        "b1": 0.32,\n        "b2": 0.01,\n        "b3": 1.2,\n        "b4": 1.3,\n        "b5": 0.82,\n        "b6": 0.4,\n        "b7": 0.3\n    },\n    "response": [],\n    "type": "questionnaire"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"transforming-the-components",children:"Transforming The Components"}),"\n",(0,i.jsxs)(n.p,{children:['Notice that each component in this sequence we created is not the website component that we\'d like. Instead, these are "filler components". The idea of the ',(0,i.jsx)(n.code,{children:"from_data"})," method (or the similarly designed ",(0,i.jsx)(n.code,{children:"permute"})," method) is to generate the ",(0,i.jsx)(n.em,{children:"structure"})," of the sequence. This method applies each of the data rows to the ",(0,i.jsx)(n.code,{children:"meta"})," attribute of the components. These attributes will be printed out when inspecting the JSON and will appear in the final config. However, in general, the ",(0,i.jsx)(n.code,{children:"meta"})," attribute does not have any tangible effect on the resulting component. This ",(0,i.jsx)(n.code,{children:"meta"})," attribute is used when transforming these filler components into our desired components. Below we inspect the ",(0,i.jsx)(n.code,{children:"meta"})," attribute of the first component in the sequence."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"print(data_sequence.get_components()[0].get('meta'))\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-output",children:"{'id': 1, 'b1': 0.32, 'b2': 0.01, 'b3': 1.2, 'b4': 1.3, 'b5': 0.82, 'b6': 0.4, 'b7': 0.3}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now that we've verified that the metadata attributes are correctly applied to the components, lets transform these filler components to the components we'd like. We start by creating a \"component function\""}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Define the response and the base component.\n\nresponse_one = rvt.response(\n    id='barChart',\n    prompt='Your selected answer:',\n    location='belowStimulus',\n    type='reactive',\n    required=True\n)\n\nbase_component = rvt.component(\n    component_name__='bar-chart',\n    type='website',\n    response=[response_one],\n    path=\"./assets/bar-chart-interaction.html\",\n    instructionLocation='aboveStimulus'\n)\n\ndef bar_chart_component_function(id, b1, b2, b3, b4, b5, b6, b7):\n    # Toggle between 'largest' and 'smallest' depending on \n    # if the original ID is an odd or even number.\n    largest_smallest_string = 'smallest' if id % 2 == 0 else 'largest'\n    \n    comp = rvt.component(\n        base__=base_component,\n        component_name__=f'bar-chart-{id}',\n        description=f\"A trial for the user to click the {largest_smallest_string} bar\",\n        instruction=f'Click on the {largest_smallest_string} bar',\n        parameters={\n            \"barData\": [b1, b2, b3, b4, b5, b6, b7]\n        }\n    )\n    \n    # Always return a component in our component functions.\n    return comp\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The component function defined above has the headers of the CSV file as the parameters to the function. When we use this component function, the ",(0,i.jsx)(n.code,{children:"meta"})," attributes of each filler component will be passed into as arguments to this function and return the resulting component to overwrite the filler component."]}),"\n",(0,i.jsxs)(n.p,{children:["Optionally, we could define this component function with the single parameter ",(0,i.jsx)(n.code,{children:"**kwargs"}),". This will ensure that any argument in the metadata attributes can be passed into the function. However, this would then require you to use syntax like ",(0,i.jsx)(n.code,{children:"kwargs.get('b1')"})," instead of just ",(0,i.jsx)(n.code,{children:"b1"}),". You should consider these options when designing your component function based on your specific needs."]}),"\n",(0,i.jsx)(n.p,{children:"If the component function fails to create the component, the operation will not totally fail. Instead, the original filler component will remain in its place."}),"\n",(0,i.jsx)(n.p,{children:"Now that we have the function defined, the transformation is simple:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"data_sequence.component(bar_chart_component_function)\n\nprint(data_sequence)\nprint(data_sequence.get_components()[0])\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-output",children:'{\n    "components": [\n        "bar-chart-6",\n        "bar-chart-5",\n        "bar-chart-4",\n        "bar-chart-3",\n        "bar-chart-2",\n        "bar-chart-1"\n    ],\n    "order": "random"\n}\n{\n    "description": "A trial for the user to click the smallest bar",\n    "instruction": "Click on the smallest bar",\n    "instructionLocation": "aboveStimulus",\n    "parameters": {\n        "barData": [\n            0.3,\n            1.1,\n            0.65,\n            0.77,\n            0.4,\n            1.3,\n            1.1\n        ]\n    },\n    "path": "./assets/bar-chart-interaction.html",\n    "response": [\n        {\n            "id": "barChart",\n            "location": "belowStimulus",\n            "prompt": "Your selected answer:",\n            "required": true,\n            "type": "reactive"\n        }\n    ],\n    "type": "website"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-the-final-sequence",children:"Creating the Final Sequence"}),"\n",(0,i.jsx)(n.p,{children:"Now that we have the new sequence we created, let's redefine our study config and the inputted sequence."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"\nintroduction = rvt.component(\n    component_name__='introduction',\n    type='markdown',\n    path='./assets/introduction.md' # <--- Relative path to asset from this notebook\n)\n\nsequence = rvt.sequence(order='fixed', components=[introduction]) + data_sequence\n\nprint(sequence)\n\nstudy_metadata = rvt.studyMetadata(\n    title='Passing Data From reVISit to HTML and back',\n    version='pilot',\n    authors=[\n        'The reVISit Team',\n        'reVISitPy'\n    ],\n    date='2025-01-20',\n    description=\"A demo of how to pass visualization data from reVISit to HTML and send user answers from HTML back to the reVISit.\",\n    organizations=[\n        \"University of Utah\",\n        \"WPI\",\n        \"University of Toronto\"\n    ]\n)\n\nui_config = rvt.uiConfig(\n    contactEmail=\"contact@revisit.dev\",\n    helpTextPath=\"./assets/help.md\",\n    logoPath=\"./assets/revisitLogoSquare.svg\",\n    withProgressBar=True,\n    autoDownloadStudy=False,\n    autoDownloadTime=5000,\n    sidebar=False\n)\n\nstudy = rvt.studyConfig(\n    schema='https://raw.githubusercontent.com/revisit-studies/study/v2.0.0/src/parser/StudyConfigSchema.json',\n    uiConfig=ui_config,\n    studyMetadata=study_metadata,\n    sequence=sequence\n)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-output",children:'{\n    "components": [\n        "introduction",\n        {\n            "components": [\n                "bar-chart-6",\n                "bar-chart-5",\n                "bar-chart-4",\n                "bar-chart-3",\n                "bar-chart-2",\n                "bar-chart-1"\n            ],\n            "order": "random"\n        }\n    ],\n    "order": "fixed"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Finally, lets preview this in our widget."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import revisitpy_server as rs\n\nprocess = rs.serve()\n\nw = rvt.widget(study, server=True)\n\n# In your own Jupyter notebook, calling `w` will now display the widget in a fully interactive manner.\n# w\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-output",children:"Server is running in the background at http://localhost:8080\nCopying file from ./assets/introduction.md to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/introduction.md\nCopying file from ./assets/bar-chart-interaction.html to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/bar-chart-interaction.html\nCopying file from ./assets/bar-chart-interaction.html to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/bar-chart-interaction.html\nCopying file from ./assets/bar-chart-interaction.html to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/bar-chart-interaction.html\nCopying file from ./assets/bar-chart-interaction.html to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/bar-chart-interaction.html\nCopying file from ./assets/bar-chart-interaction.html to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/bar-chart-interaction.html\nCopying file from ./assets/bar-chart-interaction.html to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/bar-chart-interaction.html\nCopying file from ./assets/help.md to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/help.md\nCopying file from ./assets/revisitLogoSquare.svg to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/revisitLogoSquare.svg\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);