"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[8349],{95825:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"revisitpy/examples/example_jnd_study","title":"Scatter JND Example Study","description":"In this example, we\'ll create a full Scatter JND study using vega components. We\'ll use numpy and scipy to generate a dataset, pandas to create a well-structured data frame, and the revisitpy package to tie it all together.","source":"@site/docs/revisitpy/examples/example_jnd_study.md","sourceDirName":"revisitpy/examples","slug":"/revisitpy/examples/example_jnd_study","permalink":"/docs/revisitpy/examples/example_jnd_study","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Simple HTML Study","permalink":"/docs/revisitpy/examples/example_simple_html"},"next":{"title":"FAQ","permalink":"/docs/faq"}}');var a=t(74848),i=t(28453);const o={},s="Scatter JND Example Study",c={},l=[{value:"Generating the Data",id:"generating-the-data",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"scatter-jnd-example-study",children:"Scatter JND Example Study"})}),"\n",(0,a.jsxs)(n.p,{children:["In this example, we'll create a full Scatter JND study using vega components. We'll use numpy and scipy to generate a dataset, pandas to create a well-structured data frame, and the ",(0,a.jsx)(n.code,{children:"revisitpy"})," package to tie it all together."]}),"\n",(0,a.jsxs)(n.p,{children:["You'll see that we have a section which uses the ",(0,a.jsx)(n.code,{children:"revisitpy"})," Widget. This widget is a fully interactive jupyter notebook widget which allows us to preview the created study directly in the notebook. You'll notice that we also utilize the ",(0,a.jsx)(n.code,{children:"revisitpy_server"})," package. This is to simplify the process of viewing our widget. Specifically, it removes the requirement of having a version of the reVISit repository running locally on your computer."]}),"\n",(0,a.jsx)(n.p,{children:"We'll start by defining the basic structure of the study:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nimport revisitpy as rvt\n\n# Meta Data\nstudy_metadata = rvt.studyMetadata(\n    authors=[\"Brian Bollen\"],\n    organizations=[\"Visualization Design Lab\"],\n    title='Showcasing revisit-py',\n    description='',\n    date='2025-01-13',\n    version='1.0'\n)\n\n\n# UI Config\nui_config = rvt.uiConfig(\n  contactEmail=\"briancbollen@gmail.com\",\n  logoPath=\"./assets/revisitLogoSquare.svg\",\n  sidebar=True,\n  withProgressBar=False\n)\n\n# Introduction\nintroduction = rvt.component(type='markdown', path='./assets/introduction.md', component_name__= 'introduction')\n\n# Snippet of the introduction component.\nprint(introduction)\n\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-output",children:'{\n    "path": "./assets/introduction.md",\n    "response": [],\n    "type": "markdown"\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"generating-the-data",children:"Generating the Data"}),"\n",(0,a.jsx)(n.p,{children:"We now want to generate the datasets that will go into our vega charts. We don't yet have to worry about rendering these, we'll just define the functions to generate the data."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import numpy as np\nfrom scipy.special import erfinv, erf\n\ndef generate_correlated_data_uniform(correlation, num_points, seed=None):\n    """\n    Generate a dataset with two variables having the specified correlation,\n    with values bounded between 0 and 1.\n    Parameters:\n        correlation (float): Desired correlation coefficient (-1 to 1).\n        num_points (int): Number of data points to generate.\n        seed (int, optional): Random seed for reproducibility.\n    Returns:\n        np.ndarray: A 2D array of shape (num_points, 2), where each column is a variable.\n    """\n    if not -1 <= correlation <= 1:\n        raise ValueError("Correlation must be between -1 and 1.")\n    if seed is not None:\n        np.random.seed(seed)\n    # Generate two independent uniform random variables between 0 and 1\n    x = np.random.rand(num_points)\n    z = np.random.rand(num_points)\n    # Apply inverse transform sampling to convert uniform to normal\n    x_normal = np.sqrt(2) * erfinv(2 * x - 1)  # Inverse CDF of normal distribution\n    z_normal = np.sqrt(2) * erfinv(2 * z - 1)\n    # Combine them using the desired correlation\n    y_normal = correlation * x_normal + np.sqrt(1 - correlation**2) * z_normal\n    # Transform back to uniform distribution using normal CDF\n    x_uniform = 0.5 * (1 + erf(x_normal / np.sqrt(2)))\n    y_uniform = 0.5 * (1 + erf(y_normal / np.sqrt(2)))\n    # Stack into a 2D array\n    data = np.column_stack((x_uniform, y_uniform))\n    return data\n\n# Example of dataset\nprint(generate_correlated_data_uniform(0.6, 10, seed=42))\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-output",children:"[[0.37454012 0.03397256]\n [0.95071431 0.99369625]\n [0.73199394 0.87335673]\n [0.59865848 0.31251313]\n [0.15601864 0.09121347]\n [0.15599452 0.09198872]\n [0.05808361 0.08811887]\n [0.86617615 0.76262552]\n [0.60111501 0.50662253]\n [0.70807258 0.45573666]]\n"})}),"\n",(0,a.jsx)(n.h1,{id:"vega-altair-chart",children:"Vega Altair Chart"}),"\n",(0,a.jsxs)(n.p,{children:["Let's create vega altair chart with two scatterplots. We start with two data frames ",(0,a.jsx)(n.code,{children:"data1"})," and ",(0,a.jsx)(n.code,{children:"data2"}),", each with ",(0,a.jsx)(n.code,{children:"x"})," and ",(0,a.jsx)(n.code,{children:"y"})," columns. We then create two scatterplots for those data and concat them to place them side-by-side. The generated vega-spec will be imported to reVISit config."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import random\nimport pandas as pd\nimport altair as alt\nimport vl_convert as vlc\n\n# Enable png output to save the image.\nalt.renderers.enable(\"png\")\n\ndef create_vega_chart(visType, numPoints, corrValues):\n    random.shuffle(corrValues)\n    # Convert NumPy array to a DataFrame\n    data1 = pd.DataFrame(\n        generate_correlated_data_uniform(corrValues[0], numPoints, seed=42),\n        columns=['X', 'Y']\n    )\n    data2 = pd.DataFrame(\n        generate_correlated_data_uniform(corrValues[1], numPoints, seed=42),\n        columns=['X', 'Y']\n    )\n    \n    # Create Scatter plot 1\n    scatter1 = alt.Chart(data1).mark_point(fill='black', stroke='black').encode(\n        x=alt.X('X:Q', axis=alt.Axis(\n            labels=False,\n            ticks=False,\n            grid=False,\n            domain=True,\n            title=None\n\n        )),\n        y=alt.Y('Y:Q', axis=alt.Axis(\n            labels=False,\n            ticks=False,\n            grid=False,\n            domain=True,\n            title=None\n        ))\n    ).properties(\n        title='',\n        width=300,\n        height=300,\n    )\n    \n    # Create Scatter plot two\n    scatter2 = alt.Chart(data2).mark_point(fill='black', stroke='black').encode(\n        x=alt.X('X:Q', axis=alt.Axis(\n            labels=False,\n            ticks=False,\n            grid=False,\n            domain=True,\n            title=None\n\n        )),\n        y=alt.Y('Y:Q', axis=alt.Axis(\n            labels=False,\n            ticks=False,\n            grid=False,\n            domain=True,\n            title=None\n        ))\n    ).properties(\n        title='',\n        width=300,\n        height=300\n    )\n\n    # Horizontally concatenate the plots\n    chart = alt.hconcat(\n        scatter1,\n        scatter2\n    ).configure_view(\n        strokeWidth=0,  \n        continuousWidth=300,  \n        continuousHeight=300, \n        step=50               \n    ).configure_concat(\n        spacing=50  \n    )\n\n    vega_lite_spec = chart.to_json()\n    vega_spec = vlc.vegalite_to_vega(vega_lite_spec, vl_version=\"5.20\")\n    return [vega_spec, chart]\n\n[my_vega_spec, my_chart] = create_vega_chart('scatterPlot', 20, [0.3,0.9])\n\n# Display Chart\nmy_chart\n\n\n\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:t(83734).A+"",width:"660",height:"315"})}),"\n",(0,a.jsx)(n.h1,{id:"creating-the-component-function",children:"Creating The Component Function"}),"\n",(0,a.jsx)(n.p,{children:"In order to permute and create these charts based on these variables, we define a component function to be passed into our permutation method. When we permute over the factors, we use this component function to generate the final component."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def component_function(visType=None, numPoints=None, corrValues=None):\n    if(visType is not None and numPoints is not None and corrValues is not None):\n        [vega_spec, chart] = create_vega_chart(visType=visType, numPoints=numPoints, corrValues=corrValues)\n            \n        # Update signals with new signals for the final vega spec.\n        vega_spec['config'][\"signals\"] = [\n            {\n                \"name\": \"revisitAnswer\",\n                \"value\": {},\n                \"on\": [\n                    {\n                        \"events\": \"@concat_0_group:click\",\n                        \"update\": \"{responseId: 'vegaDemoResponse1', response: 'left'}\"\n                    },\n                    {\n                        \"events\": \"@concat_1_group:click\",\n                        \"update\": \"{responseId: 'vegaDemoResponse1', response: 'right'}\"\n                    },\n                    {\n                        \"events\": {\"source\": \"window\", \"type\": \"keydown\"},\n                        \"update\": \"event.key === 'ArrowLeft' ? {responseId: 'vegaDemoResponse1', response: 'left'} : event.key === 'ArrowRight' ? {responseId: 'vegaDemoResponse1', response: 'right'} : revisitAnswer\"\n                    },\n                ]\n            }\n        ]\n        \n        # Add signal based bordering\n        for entry in vega_spec['marks']:\n            if entry['name'] == 'concat_0_group':\n                condition = 'left'\n            else:\n                condition = 'right'\n            entry['encode']['update']['stroke'] = {\n                \"signal\": f\"revisitAnswer.response === '{condition}' ? 'blue' : null\"\n            },\n            entry['encode']['update']['strokeWidth'] = {\n                \"signal\": f\"revisitAnswer.response === '{condition}' ? 3 : 0\"\n            }\n        \n        return rvt.component(\n            type='vega',\n            config=vega_spec,\n            component_name__=f'{visType}-{numPoints}-{round(corrValues[0],1)},{round(corrValues[1],1)}',\n            response=[\n                rvt.response(\n                    id='vegaDemoResponse1',\n                    prompt='You Selected: ',\n                    location='sidebar',\n                    type='reactive',\n                    required=True\n                )\n            ]\n        )\n\n    return rvt.component(\n        type='questionnaire',\n        component_name__='blank-component'\n    )\n\n# You can print the output of our component function with some test values.\n\n# print(component_function('scatterPlot',20,corrValues=[0.2,0.9]))\n"})}),"\n",(0,a.jsx)(n.h1,{id:"final-sequencing",children:"Final Sequencing"}),"\n",(0,a.jsx)(n.p,{children:"Here we generate the different combinations of the correlation values that we'd like (every combination of two numbers between 0 and 1 with precision 1). Then, we generate a fixed order sequence and being the permutations over our factors. We first permute over the visualization type, then over the number of points, then over all possible correlation value pairs."}),"\n",(0,a.jsx)(n.p,{children:"Once this sequence is generated, we append it to a sequence only containing the introduction."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import itertools\n\n# Generate all combinations of two values between 1 and 10\ncombinations = itertools.combinations(range(1, 11), 2)\n\n# Create the dataset with values divided by 10\ndataSet = [{'corrValues': [x / 10, y / 10]} for x, y in combinations]\n# Create the dataset with values divided by 10\n\n\nmain_sequence = rvt.sequence(order='fixed')\n\nmain_sequence.permute(\n        factors=[{'visType': 'scatterPlot'}, {'visType': 'parallelCoords'}],\n        order='latinSquare',\n    ).permute(\n        factors=[{'numPoints': 20}, {'numPoints': 100}],\n        order='fixed',\n    ).permute(\n        factors=dataSet,\n        order='random',\n    ).component(component_function)\n    \nsequence = rvt.sequence(order='fixed',components=[introduction]) + main_sequence\n\nstudy = rvt.studyConfig(\n    schema=\"https://raw.githubusercontent.com/revisit-studies/study/v2.0.0-rc1/src/parser/StudyConfigSchema.json\",\n    uiConfig=ui_config,\n    studyMetadata=study_metadata,\n    sequence=sequence\n)\n\n# Prints the entire configuration file which is approximately 150,000 lines of JSON\n# print(study)\n\n"})}),"\n",(0,a.jsxs)(n.h1,{id:"using-revisitpy_server-to-prepare-our-widget",children:["Using ",(0,a.jsx)(n.code,{children:"revisitpy_server"})," to Prepare Our Widget"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"revisitpy"})," package provides a widget in order to preview our study directly in a Jupyter notebook. We can interact with the study, check that vega signals work, and even create some introductory data ourselves. In order for the widget to work, a local copy of the reVISit must be running on your local computer. If you already have reVISit locally (colloqioully our ",(0,a.jsx)(n.code,{children:"study"})," repo), then all you need to do is navigate to your repository and run ",(0,a.jsx)(n.code,{children:"yarn serve"}),". After this, the widget we create in this jupyter notebook will be useable."]}),"\n",(0,a.jsxs)(n.p,{children:["A simpler way to achieve the same goal, however is using the ",(0,a.jsx)(n.code,{children:"revisitpy_server"})," Python package. This is a simple python package which already has the most recent reVISit repository built and runs a server locally. After installing ",(0,a.jsx)(n.code,{children:"revisitpy_server"}),", all that is required is the following:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import revisitpy_server as rs\nprocess = rs.serve()\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-output",children:"Server is running in the background at http://localhost:8080\n"})}),"\n",(0,a.jsx)(n.h1,{id:"the-widget",children:"The Widget"}),"\n",(0,a.jsxs)(n.p,{children:["Now that your server is running, we create the widget with the configuration file we created above. When calling the widget, we are assuming that the assets referenced in the configuration file are relative to this notebook. The widget then copies these static assets to the appropriate directory. Since we're currently using the ",(0,a.jsx)(n.code,{children:"revisitpy_server"})," package, you'll see that they copied into the assets of the local virtual environment ",(0,a.jsx)(n.code,{children:"revisitpy_server"})," package."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"w = rvt.widget(study, server=True)\n\n# In your own Jupyter notebook, calling `w` will now display the widget in a fully interactive manner.\n# w\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Output:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-output",children:"Copying file from ./assets/introduction.md to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/introduction.md\nCopying file from ./assets/revisitLogoSquare.svg to /Users/bbollen23/revisit-py-examples/.venv/lib/python3.12/site-packages/revisitpy_server/static/__revisit-widget/assets/revisitLogoSquare.svg\n"})}),"\n",(0,a.jsx)(n.h1,{id:"optional-terminate-the-server",children:"Optional: Terminate the server"}),"\n",(0,a.jsx)(n.p,{children:"Closing the notebook will automatically terminate the server. If you'd rather do this manually, you can do the following."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"process.terminate()\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},83734:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/example_jnd_study_5_0-5b4fc1e9737750518d1d8eae94fd9fe0.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(96540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);